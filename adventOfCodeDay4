test1 = "ymszqfuo-nmewqf-iadwetab-690[unsbc]"
test2 = "a-b-c-d-e-f-g-h-987[abcde]"
test3 = "not-a-real-room-404[oarel]"
test4 = "totally-real-room-200[decoy]"

#function to break input into a list of data to test
def parseInput(enkey):                        
  parkey = []
  split1 = enkey.split("-")                   #break up input by -
  parkey.append(split1[:-1])                  #append the letters as a list
  split2 = split1[len(split1) - 1].split("[") #break off the room num from checksum
  parkey.append(int(split2[0]))               #append the room num as int
  split3 = split2[1][:-1]                     #break off the final ] from checksum
  parkey.append(split3)                       #append the checksum as str
  return parkey
  
#function to test if room number is valid via checksum
def testInput(name, checksum):
  testDict = {}                               #build a dict to hold letter totals
  for char in checksum:                       #I only care about letters in the checksum
    testDict[char] = 0                        #build Dict with 0 totals
  testChars = "".join(name)                   #convert the name letters into a single string
  for char in testChars:                      #total up the occurances of the letters in name 
    if char in testDict:                        #that match the values of the checksum
      testDict[char] += 1
  for i in range(1, len(checksum)):           #check for valid checksum, descending totals or 
    if testDict[checksum[i]] == 0:
      return False
    if testDict[checksum[i - 1]] > testDict[checksum[i]]:   #ties are in alphabetical order
      return True
    elif testDict[checksum[i - 1]] == testDict[checksum[i]]:
      if checksum[i - 1] < checksum[i]:
        return True
      else:
        return False
    else:
      return False

def testFile(file):
  totSec = 0
  with open(file) as f:
    for line in f:
      parkey = parseInput(line)
      if testInput(parkey[0], parkey[2]):
        #print parkey[1]
        totSec += parkey[1]
  return totSec

print testFile("day4data.txt") 
#runTest = parseInput(test1)
#print testInput(runTest[0], runTest[2])
